FlipTilHeads(0.7)
FlipTilHeads(prob = 0.5)
n <- 0
flipping <- 0
outcome <- 0:1
while (flipping == 0) {
flipping <- sample(outcome, 1, replace = TRUE, prob = c(prob, 1- prob))
n <- n+1
}
return (n)
}
FlipTilHeads <- function(prob) {
n <- 0
flipping <- 0
outcome <- 0:1
while (flipping == 0) {
flipping <- sample(outcome, 1, replace = TRUE, prob = c(prob, 1- prob))
n <- n+1
}
n
}
FlipTilHeads(prob = 0.5)
FlipTilHeads <- function(prob) {
n <- 0
flipping <- 0
outcome <- 0:1
while (flipping == 0) {
flipping <- sample(outcome, 1, replace = TRUE, prob = c(prob, 1- prob))
n <- n+1
}
return(n)
}
FlipTilHeads(prob = 0.5)
```
FlipTilHeads(prob = 0.5)
```
## Continued Fractions
FlipTilHeads(prob = 0.5)
FlipTilHeads(prob = 0.5)
FlipTilHeads <- function(prob) {
n <- 0
flipping <- 0
outcome <- 0:1
while (flipping == 0) {
flipping <- sample(outcome, 1, replace = TRUE, prob = c(prob, 1- prob))
n <- n+1
}
return(n)
}
FlipTilHeads(prob = 0.5)
?lastdigit
?is.integer
?str_split
?cf.expand
?expand
Hailstone <- function(n){
counter <- 0
if (n != is.integer(n)) {
stop "n is not an integer"
} else if (n <= 0) {
stop "n is not positive"
} else {
while (outcome != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
counter <- counter+1
}
Hailstone <- function(n){
counter <- 0
if (n != is.integer(n)) {
stop "n is not an integer"
} else if (n <= 0) {
stop "n is not positive"
} else {
while (outcome != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
counter <- counter+1
return(counter)
}
Hailstone <- function(n){
counter <- 0
if (n != is.integer(n)) {
stop "n is not an integer"
Hailstone <- function(n){
counter <- 0
if (n != is.integer(n)) {
stop "n is not an integer"
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+1/x[l]
for (i in l-1, 2, -1) {
f <- (1/f)+[i-1]
}
return(f)
}
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+1/x[l]
for (i in l-1, 2, -1) {
f <- (1/f)+[i-1]
}
return(f)
}
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+1/x[l]
f <- x[l-1]+(1/x[l])
for (i in l-1, 2, -1) {
f <- (1/f)+[i-1]
}
return(f)
for (i in (l-1), 2, -1) {
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1) {
for (i in seq (l-1, 2, -1) {
f <- (1/f)+[i-1]
}
return(f)
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq (l-1, 2, -1) {
f <- (1/f)+[i-1]
}
return(f)
}
?seq
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1) {
term <- (1/f)+[i-1]
}
return(term)
for (i in seq(l-1, 2, -1) {
term <- (1/f)+[i-1]
}
return(term)
Hailstone <- function(n){
counter <- 0
if (n != is.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (outcome != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
counter <- counter+1
return(counter)
}
Hailstone(208)
Hailstone(208L)
Hailstone <- function(n){
counter <- 0
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (outcome != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
counter <- counter+1
return(counter)
}
Hailstone(208L)
Hailstone <- function(n){
counter <- 0
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
counter <- counter+1
return(counter)
}
Hailstone(208L)
FlipTilHeads <- function(prob) {
n <- 0
flipping <- 0
outcome <- 0:1
while (flipping == 0) {
flipping <- sample(outcome, 1, replace = TRUE, prob = c(prob, 1- prob))
n <- n+1
}
return(n)
}
FlipTilHeads(prob = 0.5)
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1) {
term <- (1/f)+[i-1]
}
return(term)
}
Hailstone <- function(n){
counter <- 0
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
counter <- counter+1
return("stop_time" == counter)
}
Hailstone(208)
Hailstone <- function(n){
seq <- n
stop_time <- 0
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
seq [i+1] <- n
stop_time <- stop_time+1
return(list(seq,stop_time))
}
Hailstone(1)
Hailstone <- function(n){
seq <- n
stop_time <- 0
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
seq [n+1] <- n
stop_time <- stop_time+1
return(list(seq,stop_time))
}
Hailstone(1)
Hailstone(5)
Hailstone(27)
Hailstone <- function(n){
seq <- n
stop_time <- 0
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
seq [i+1] <- n
stop_time <- stop_time+1
return(list(seq,stop_time))
}
Hailstone(1)
Hailstone <- function(n){
seq <- n
stop_time <- 0
i <- 0
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
seq [i+1] <- n
stop_time <- stop_time+1
return(list(seq,stop_time))
}
Hailstone(1)
Hailstone <- function(n){
seq <- n
stop_time <- 0
i <- 0
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
seq [i+1] <- n
stop_time <- stop_time+1
print(list(seq,stop_time))
}
Hailstone(1)
Hailstone(5)
Hailstone(27)
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1) {
term <- (1/f)+[i-1]
}
return(term)
}
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1) {
f <- (1/f)+[i-1]
}
return(f)
}
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1) {
f <- ((1/f)+[i-1])
}
return(f)
}
Hailstone <- function(n){
seq <- n
stop_time <- 0
i <- 1
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
seq [i+1] <- n
stop_time <- stop_time+1
return(list(seq,stop_time))
}
Hailstone(1)
Hailstone(5)
Hailstone(27)
Hailstone <- function(n){
seq <- n
stop_time <- 0
i <- 1
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
seq [i+1] <- n
stop_time <- stop_time+1
return(list(sequence == seq,stop_time == stop_time))
}
Hailstone(1)
Hailstone <- function(n){
seq <- n
stop_time <- 0
i <- 1
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
return (n/2)
} else if (n %% 2 == 1)
return ((3*n)+1)
}}
seq [i+1] <- n
stop_time <- stop_time+1
return(list(sequence = seq,stop_time = stop_time))
}
Hailstone(1)
Hailstone(5)
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1) {
f <- (1/f)+[i-1])
}
return(f)
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1) {
f <- (1/f)+[i-1])
}
return(f)
}
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1)) {
f <- (1/f)+[i-1])
}
return(f)
}
# your code
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1)) {
f <- (1/f)+[i-1]
}
return(f)
}
seq(l-1, 2, -1)
seq(5,2,-1)
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1)) {
f <- (1/f)+x[i-1]
}
return(f)
}
Hailstone <- function(n){
seq <- n
stop_time <- 0
i <- 1
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
n <- (n/2)
i <- i+1
seq[i] <- n
} else if (n %% 2 == 1) {
n <- (3*n)+1
i <- i+1
seq[i] <- n
}
}
stop_time <- stop_time+1
return(list(sequence = seq,stop_time = stop_time))
}
Hailstone(1)
Hailstone <- function(n){
seq <- n
stop_time <- 0
i <- 1
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
n <- (n/2)
i <- i+1
seq[i] <- n
} else if (n %% 2 == 1) {
n <- (3*n)+1
i <- i+1
seq[i] <- n
}
}
stop_time <- stop_time+1
return(list(sequence = seq,stop_time = stop_time))
}
