sample(x = vector_to_be_sampled, size, replace = FALSE, prob = NULL)
pmax(a)
?pmax
pmax("a")
pmax(c(1, 5, 3))
max(c(1, 5, 3))
pmax(c(1, 5, 3))
max(c(1, 5, 3))
pmax(c(2, 4, 2))
max(c(2, 4, 2))
AdvRoll <- function (x) {
x <- max ([0-6]{2})
return x
}
AdvRoll <- function (x) {
x <- (max ([0-6]{2}))
return (x)
}
AdvRoll <- function (x) {
sides <- [0-6]
}
AdvRoll <- function (x) {
sides <- ([0-6])
}
?is.character
?median
?mean
?median
?summary
?mode
MySummary <- function(x) {
x <- (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
}
MySummary <- function(x) {
x <- (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
return x
}
MySummary <- function(x) {
return (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
}
sides <- (1:6)
sides <- (1:6)
sides
AdvRoll <- function (sides, n) {
sides <- (1:6)
sample(sides, size = n)
}
AdvRoll <- function (sides, n) {
sides <- (1:6)
rdwa <- max(sample(sides), size = 2)
}
AdvRoll <- function (sides, n) {
sides <- (1:6)
rdwa <- max(sample(sides), size = 2, replace = TRUE)
return sample(rdwa, n)
}
AdvRoll <- function (sides, n) {
sides <- (1:6)
rdwa <- max(sample(sides), size = 2, replace = TRUE)
return sample(rdwa, n)
}
AdvRoll <- function (sides, n) {
sides <- (1:6)
rdwa <- max(sample(sides), size = 2, replace = TRUE)
sample(rdwa, n)
}
AdvRoll <- function (sides, n) {
sides <- (1:6)
rdwa <- max(sample(sides), size = 2, replace = TRUE)
sample(rdwa, n)
}
AdvRoll(n=10)
AdvRoll <- function (sides, n) {
sides <- (1:6)
rdwa <- max(sample(sides), size = 2, replace = TRUE)
sample(rdwa, n)
}
AdvRoll(n=10)
AdvRoll <- function (sides, n) {
sides <- (1:6)
rdwa <- max(sample(sides), size = 2, replace = TRUE)
sample(rdwa, n)
}
AdvRoll(10)
MySummary <- function(x) {
return (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
}
MySummary <- function(x) {
(c(mean(x), median(x), mode(x), sum(x), sum(x^2))
}
MySummary <- function(x) {
return (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
}
MySummary <- function(x) {
return (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
MySummary <- function(x) {
y <- (c(mean(x), median(x), mode(x), sum(x), sum(x^2)))
return y
}
AdvRoll(10)
AdvRoll(n=10)
AdvRoll <- function (sides, n) {
sides <- (1:6)
rdwa <- max(sample(sides), size = 2, replace = TRUE)
sample(rdwa, n, replace = TRUE)
}
AdvRoll(10)
AdvRoll <- function (sides, n) {
sides <- 1:6
rdwa <- max(sample(sides, size = 2, replace = TRUE)
sample(rdwa, n, replace = TRUE)
}
AdvRoll <- function (sides, n) {
sides <- 1:6
rdwa <- max(sample(sides, size = 2, replace = TRUE)
sample(rdwa, n, replace = TRUE)
}
AdvRoll <- function (sides, n) {
sides <- 1:6
rdwa <- max(sample(sides, size = 2, replace = TRUE)
sample(rdwa, n, replace = TRUE)}
AdvRoll <- function (sides, n) {
sides <- 1:6
rdwa <- max(sample(sides, size = 2, replace = TRUE)
sample(rdwa, size = n, replace = TRUE)
}
AdvRoll <- function (sides, n) {
sides <- 1:6
rdwa <- max(sample(sides, size = 2, replace = TRUE)
sample(rdwa, size = n, replace = TRUE)
AdvRoll <- function (sides, n) {
sides <- 1:6
rdwa <- max(sample(sides, size = 2, replace = TRUE)
return sample(rdwa, size = n, replace = TRUE)
}
AdvRoll <- function (sides, n) {
sides <- (1:6)
rdwa <- (max(sample(sides, size = 2, replace = TRUE))
return (sample(rdwa, size = n, replace = TRUE))
}
AdvRoll <- function(sides, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
max(rdwa)
return sample(rdwa, size = n, replace = TRUE)
}
AdvRoll <- function(sides, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
max(rdwa)
sample(rdwa, size = n, replace = TRUE)
}
AdvRoll(n = 10)
AdvRoll <- function(sides, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
max(rdwa)
sample(rdwa, size = n, replace = TRUE)
}
AdvRoll(100)
AdvRoll(n = 100)
AdvRoll <- function() {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
max(rdwa)
sample(rdwa, size = n, replace = TRUE)
}
AdvRoll(n = 100)
AdvRoll(100)
AdvRoll <- function(rdwa, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
max(rdwa)
sample(rdwa, size = n, replace = TRUE)
}
AdvRoll(100)
AdvRoll <- function(rdwa, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
max(rdwa)
sample(rdwa, size = n, replace = TRUE)
}
AdvRoll(n= 100)
AdvRoll <- function(rdwa, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
sample(max(rdwa), size = n, replace = TRUE)
}
AdvRoll(n= 100)
AdvRoll <- function(sides, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
return sample(max(rdwa), size = n, replace = TRUE)
}
AdvRoll <- function(sides, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
sample(max(rdwa), size = n, replace = TRUE)
}
AdvRoll(n= 100)
AdvRoll(100)
AdvRoll(100)
AdvRoll(100)
AdvRoll(100)
AdvRoll(100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll <- function(rdwa, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
sample(max(rdwa), size = n, replace = TRUE)
}
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
AdvRoll(n = 100)
MySummary <- function(x) {
y <- (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
return y
}
MySummary <- function(y) {
y <- (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
return y
}
y
MySummary <- function(x) {
y <- (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
y
MySummary <- function(x) {
y <- (c(mean(x), median(x), mode(x), sum(x), sum(x^2))
}
MySummary <- function(x) {
a <- mean(x)
b <- median(x)
c <- mode(x)
d <- sum(x)
e <- sum(x^2)
y <- c(a,b,c,d,e)
}
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll <- function(rdwa, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
sample(max(rdwa), size = n, replace = TRUE)
}
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll <- function(rdwa, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
sample(max(rdwa), size = n, replace = TRUE)
}
AdvRoll(n = 1000)
MySummary(1000times)
MySummary(x = 1000times)
MySummary <- function(x) {
a <- mean(x)
b <- median(x)
c <- mode(x)
d <- sum(x)
e <- sum(x^2)
y <- c(a,b,c,d,e)
}
MySummary(x = 1000times)
MySummary(list:1000times)
1000times<- AdvRoll(n = 1000)
1000times
1000times <- AdvRoll(n = 1000)
1000times <- AdvRoll(n = 1000)
1000 <- AdvRoll(n = 1000)
experiment <- AdvRoll(n = 1000)
experiment
experiment
experiment
experiment
experiment
MySummary(experiment)
experiment_summary <- MySummary(experiment)
experiment_summary
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
AdvRoll(n = 1000)
zeroes <- function(a,b,c) {
roots <- c((-b+((b^2)-4*a*c)^(1/2))/2a, (-b-((b^2)-4*a*c)^(1/2))/2a)
if (roots > 0) {
return (roots)
} else if (roots == 0 ) {
return (-b/(2a))
} else if (roots < 0) {
return ("This polynomial has no real roots")
}
}
zeroes <- function(a,b,c) {
roots <- c((-b+((b^2)-4*a*c)^(1/2))/2a, (-b-((b^2)-4*a*c)^(1/2))/2a)
if (roots > 0) {
return(roots)
} else if (roots == 0) {
return (-b/(2*a))
} else if (roots < 0) {
return ("This polynomial has no real roots")
}
}
zeroes <- function(a,b,c) {
roots <- c((-b+((b^2)-4*a*c)^(1/2))/2a, (-b-((b^2)-4*a*c)^(1/2))/2a)
if (roots > 0) {
return(roots)
} else if (roots == 0) {
return (-b/(2*a))
} else if (roots < 0) {
return ("This polynomial has no real roots")
}
}
zeroes <- function(a,b,c) {
roots <- c((-b+((b^2)-4*a*c)^(1/2))/2a, (-b-((b^2)-4*a*c)^(1/2))/2a)
if (roots > 0) {
return(roots)
} else if (roots == 0) {
return (-b/(2*a))
} else if (roots < 0) {
stop ("This polynomial has no real roots")
}
}
zeroes <- function(a,b,c) {
roots <- ((b^2)-(4*a*c))
if (roots > 0) {
return(c((-b+(roots)^1/2)/(2*a), (-b-(roots)^1/2)/(2*a))
} else if (roots == 0) {
return (-b/(2*a))
} else if (roots < 0) {
return ("This polynomial has no real roots")
}
}
zeroes <- function(a,b,c) {
roots <- c((-b+((b^2)-4*a*c)^(1/2))/2a, (-b-((b^2)-4*a*c)^(1/2))/2a)
if (roots > 0) {
return (roots)
} else if (roots == 0 ) {
return (-b/(2a))
} else if (roots < 0) {
return ("This polynomial has no real roots")
}
}
zeroes <- function(a,b,c) {
roots <- c((-b+((b^2)-4*a*c)^(1/2))/2a, (-b-((b^2)-4*a*c)^(1/2))/2a)
if (roots > 0) {
return (roots)
} else if (roots == 0 ) {
return (-b/(2a))
} else if (roots < 0) {
return ("This polynomial has no real roots")
}
zeroes <- function(a,b,c) {
root <- ((b^2)-(4*a*c))
if (root > 0) {
return(c(((-b+(root^(1/2)))/(2*a)), ((-b-(root^(1/2)))/(2*a))))
} else if (root == 0) {
return (-b/(2*a))
} else if (root < 0) {
return ("This polynomial has no real roots")
}
}
zeroes(1, 0, 0)
zeroes(1, 0, 1)
zeroes(1, 1, 1)
AdvRoll <- function(rdwa, n) {
sides <- 1:6
rdwa <- sample(sides, size = 2, replace = TRUE)
sample(max(rdwa), size = n, replace = TRUE)
}
MySummary <- function(x) {
a <- mean(x)
b <- median(x)
c <- mode(x)
d <- sum(x)
e <- sum(x^2)
y <- c(a,b,c,d,e)
}
experiment <- AdvRoll(n = 1000)
experiment
experiment_summary <- MySummary(experiment)
experiment_summary
Hailstone <- function(n){
seq <- n
stop_time <- 0
i <- 1
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
n <- (n/2)
i <- i+1
seq[i] <- n
} else if (n %% 2 == 1) {
n <- (3*n)+1
i <- i+1
seq[i] <- n
}
}
stop_time <- stop_time+1
return(list(sequence = seq,stop_time = stop_time))
}
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone(1)
Hailstone <- function(n){
seq <- n
stop_time <- 0
i <- 1
if (n != as.integer(n)) {
stop ("n is not an integer")
} else if (n <= 0) {
stop ("n is not positive")
} else {
while (n != 1) {
if (n %% 2 == 0) {
n <- (n/2)
i <- i+1
seq[i] <- n
} else if (n %% 2 == 1) {
n <- (3*n)+1
i <- i+1
seq[i] <- n
}
}
stop_time <- stop_time+1
return(list(sequence = seq,stop_time = stop_time))
}
}
Hailstone(1)
FracToDec <- function(x) {
l <- length(x)
f <- x[l-1]+(1/x[l])
for (i in seq(l-1, 2, -1)) {
f <- (1/f)+x[i-1]
}
return(f)
}
CFracToDec(c(3, 4, 12, 4))
