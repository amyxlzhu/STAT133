#q: what does pmin do?
triplets <- str_sub(x, start, stop)
invalid_triplets <- "[^CGAT]"
amino <- c()
for (n in 1:length(triplets)) {
#   if (str_detect(x, invalid_triplets)) {
#     return("Invalid DNA sequence")
#   } else {
rep <- as.character(codons[codons$dna_triplet == triplets[n], 2])
amino <- append(amino, rep)
return(amino)
}
}
dna_to_aa("GAGCCATGCATT")
dna_to_aa("GAGCCATGCATT")
dna_to_aa <- function(x) {
start <- seq(1, nchar(x), 3)
stop <- pmin(start+2, nchar(x))
#q: what does pmin do?
triplets <- str_sub(x, start, stop)
invalid_triplets <- "[^CGAT]"
amino <- c()
for (n in 1:length(triplets)) {
#   if (str_detect(x, invalid_triplets)) {
#     return("Invalid DNA sequence")
#   } else {
rep <- as.character(codons[codons$dna_triplet == triplets[n], 2])
amino <- append(amino, rep)
}
return(amino)
}
dna_to_aa("GAGCCATGCATT")
dna_to_aa <- function(x) {
start <- seq(1, nchar(x), 3)
stop <- pmin(start+2, nchar(x))
#q: what does pmin do?
triplets <- str_sub(x, start, stop)
invalid_triplets <- "[^CGAT]"
amino <- c()
for (n in 1:length(triplets)) {
#   if (str_detect(x, invalid_triplets)) {
#     return("Invalid DNA sequence")
#   } else {
rep <- as.character(codons[codons$dna_triplet == triplets[n], 2])
amino <- append(amino, rep)
}
return(paste0(amino))
}
dna_to_aa("GAGCCATGCATT")
dna_to_aa <- function(x) {
start <- seq(1, nchar(x), 3)
stop <- pmin(start+2, nchar(x))
#q: what does pmin do?
triplets <- str_sub(x, start, stop)
invalid_triplets <- "[^CGAT]"
amino <- c()
for (n in 1:length(triplets)) {
#   if (str_detect(x, invalid_triplets)) {
#     return("Invalid DNA sequence")
#   } else {
rep <- as.character(codons[codons$dna_triplet == triplets[n], 2])
amino <- append(amino, rep)
}
return(paste(amino, collapse = ""))
}
dna_to_aa("GAGCCATGCATT")
dna_to_aa("UCUGAGAAU")
dna_to_aa <- function(x) {
start <- seq(1, nchar(x), 3)
stop <- pmin(start+2, nchar(x))
#q: what does pmin do?
triplets <- str_sub(x, start, stop)
invalid_triplets <- "[CGAT]"
amino <- c()
for (n in 1:length(triplets)) {
if (str_detect(x, invalid_triplets)) {
return("Invalid DNA sequence")
} else {
rep <- as.character(codons[codons$dna_triplet == triplets[n], 2])
amino <- append(amino, rep)
}
return(paste(amino, collapse = ""))
}
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
}
dna_to_aa <- function(x) {
start <- seq(1, nchar(x), 3)
stop <- pmin(start+2, nchar(x))
#q: what does pmin do?
triplets <- str_sub(x, start, stop)
invalid_triplets <- "[CGAT]"
amino <- c()
for (n in 1:length(triplets)) {
if (str_detect(x, invalid_triplets)) {
return("Invalid DNA sequence")
} else {
rep <- as.character(codons[codons$dna_triplet == triplets[n], 2])
amino <- append(amino, rep)
}
return(paste(amino, collapse = ""))
}
}
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("GAGCCATGCATT") # "EPCI"
?str_detect
dna_to_aa <- function(x) {
start <- seq(1, nchar(x), 3)
stop <- pmin(start+2, nchar(x))
#q: what does pmin do?
triplets <- str_sub(x, start, stop)
invalid_triplets <- "[^CGAT]"
amino <- c()
for (n in 1:length(triplets)) {
if (str_detect(x, invalid_triplets)) {
return("Invalid DNA sequence")
} else {
rep <- as.character(codons[codons$dna_triplet == triplets[n], 2])
amino <- append(amino, rep)
}
return(paste(amino, collapse = ""))
}
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
dna_to_aa <- function(x) {
start <- seq(1, nchar(x), 3)
stop <- pmin(start+2, nchar(x))
#q: what does pmin do?
triplets <- str_sub(x, start, stop)
invalid_triplets <- "[^CGAT]"
amino <- c()
for (n in 1:length(triplets)) {
if (str_detect(x, invalid_triplets)) {
return("Invalid DNA sequence")
} else {
rep <- as.character(codons[codons$dna_triplet == triplets[n], 2])
amino <- append(amino, rep)
}
}
return(paste(amino, collapse = ""))
}
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
start <- seq(1, nchar('GAGCCATGCATT'), 3)
stop <- pmin(start+2, nchar('GAGCCATGCATT'))
triplets <- str_sub("GAGCCATGCATT", start, stop)
triplets
class(codons$dna_triplet)
dna_to_aa("GAGCCATGCATT") # "EPCI"
dna_to_aa("ATCTAGATAGTAGGC") # "IStopIVG"
dna_to_aa("UCUGAGAAU") # "Invalid DNA sequence"
length(states[-grep('a', states)])
no_a <- "[^a]"
str_subset(states, no_a)
#q: why doesn't this work?
```
3. Which states contain the letter `j`?
```{r}
str_subset(states, "j")
```
4. Which states are formed by two words?
```{r}
str_subset(states, '.*[" "].*')
```
5. Which states start with `W` and end with a consonant (non-vowel)?
```{r}
str_subset(states, '^[w].*[^aeiou]$')
remove_tag <- function(x) {
str_replace("(<.*?>)", x, "")
return(x)
}
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
x <- "<common>dandelion</common>"
unlist(str_split(x, ">|<"))
remove_tag <- function(x) {
unlist(str_split(x, ">|<"))[3]
}
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
states <- rownames(USArrests)
library(stringr)
states <- tolower(states)
length(str_subset(states, "i"))
remove_tag <- function(x) {
unlist(str_split(x, ">|<"))[3]
}
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
unlist(str_split(phylo, ">|<"))
min(1:5)
min(1:5,10:6)
pmin(1:5,6:10)
remove_tag <- function(x) {
unlist(str_split(x, ">|<"))[3]
}
remove_tag <- function(x) {
unlist(str_split(x, ">|<"))[3]
unlist(str_split(x, ">|<"))[7]
unlist(str_split(x, ">|<"))[11]
}
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[7]
z <- unlist(str_split(x, ">|<"))[11]
return (x,y,z)
}
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[7]
z <- unlist(str_split(x, ">|<"))[11]
return c(x,y,z)
}
#q: only works for one vector; how to make it work for all inputs (already tried loop)
remove_tag <- function(x) {
str_replace_all("(<.*?>)", x, "")
return(x)
}
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][]"," ")
return(x)
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][]"," ")
return(x)
}
phylo <- c("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>")
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][]"," ")
}
remove_tag(phylo)
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][]"," ")
}
remove_tag <- function(x) {
str_replace_all(x, "[<]"," ")
}
remove_tag <- function(x) {
str_replace_all(x, "[<]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][a-z]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][.*][>]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][a-z{.?}][>]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][>]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<.*?>]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
y <- str_replace_all(x, "[<.*?>]"," ")
y[2]
}
remove_tag(phylo)
remove_tag <- function(x) {
y <- str_replace_all(x, "[<.*?>]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<.*?>]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
}
remove_tag <- function(x) {
str_replace_all(x, "[<.*?>]"," ")
}
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
}
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
return(x)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3, 7, 11]
return(x)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))
return c(x[3], x[7], x[11])
}
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
return(x)
}
remove_tag(phylo)
unlist(str_split("<common>dandelion</common>", ">|<"))
unlist(str_split("<common>dandelion</common>",
"<genus>Taraxacum</genus>",
"<kingdom>Plantae</kingdom>", ">|<"))
unlist(str_split("<common>dandelion</common>", "<genus>Taraxacum</genus>","<kingdom>Plantae</kingdom>", ">|<"))
unlist(str_split(phylo, ">|<"))
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[8]
return(y)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[9]
return(y)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[9]
return(x)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[8]
return(x)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[8]
z <- unlist(str_split(x, ">|<"))[13]
return(list(x,y,z))
}
remove_tag(phylo)
x <- unlist(str_split(x, ">|<"))
return x
x <- unlist(str_split(x, ">|<"))[13]
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
return x
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
return (x)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[13]
return (x)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[8]
z <- unlist(str_split(x, ">|<"))[13]
return(list(x,y,z))
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[8]
z <- unlist(str_split(x, ">|<"))[13]
return(y)
}
remove_tag(phylo)
remove_tag <- function(x) {
y <- str_replace_all(x, "[<.*?>]"," ")
str_replace_all(x, y, "")
}
remove_tag(phylo)
remove_tag <- function(x) {
y <- str_replace_all(x, "[<][.*?][>]"," ")
str_replace_all(x, y, "")
remove_tag <- function(x) {
y <- str_replace_all(x, "[<][.*?][>]"," ")
str_replace_all(x, y, " ")
}
```
Test your code:
remove_tag <- function(x) {
y <- str_replace_all(x, "[<][.*?][>]"," ")
str_replace_all(x, y, " ")
}
remove_tag(phylo)
remove_tag <- function(x) {
y <- str_replace_all(x, "[<.*?>]"," ")
str_replace_all(x, y, " ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<.*?>]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][a-z][A-Z][.*?][>]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][Aa-Zz.*?][>]"," ")
}
```
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
return(x)
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][Aa-Zz]{+}[>]"," ")
}
remove_tag(phylo)
remove_tag <- function(x) {
str_replace_all(x, "[<][Aa-Zz]{+}[>]"," ")
}
#does not work
remove_tag <- function(x) {
str_replace_all(x, "[<][Aa-Zz]{+}[>]"," ")
}
unlist(str_split(phylo, ">|<"))
unlist(str_split(x, ">|<"))[8]
unlist(str_split(x, ">|<"))[7]
unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[8]
y
unlist(str_split(x, ">|<"))[8]
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
return(x)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[8]
return(x)
}
remove_tag(phylo)
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[13]
return(x)
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[8]
return(x)
}
remove_tag(phylo)
phylo <- c("<common>dandelion</common>",
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[8]
return(y)
}
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
y <- unlist(str_split(x, ">|<"))[8]
z <- unlist(str_split(x, ">|<"))[13]
return(list(x,y,z))
}
remove_tag(phylo)
remove_tag <- function(x) {
x <- unlist(str_split(x, ">|<"))[3]
return(x)
}
remove_tag(phylo)
remove_tag <- function(x) {
#str_replace_all(x, "<.*>". " ")
str_replace_all(x, "[<]([Aa-Zz]{+})[>]"," ")
}
remove_tag(phylo)
